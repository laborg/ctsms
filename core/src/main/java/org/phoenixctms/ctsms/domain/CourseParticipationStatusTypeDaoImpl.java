// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;

import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.compare.ComparatorFactory;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.CourseParticipationStatusTypeVO;

/**
 * @see CourseParticipationStatusType
 */
public class CourseParticipationStatusTypeDaoImpl
		extends CourseParticipationStatusTypeDaoBase {

	private final static Comparator<CourseParticipationStatusType> ID_COMPARATOR = ComparatorFactory.createSafeLong(CourseParticipationStatusType::getId);

	/**
	 * @inheritDoc
	 */
	@Override
	public CourseParticipationStatusType courseParticipationStatusTypeVOToEntity(CourseParticipationStatusTypeVO courseParticipationStatusTypeVO) {
		CourseParticipationStatusType entity = this.loadCourseParticipationStatusTypeFromCourseParticipationStatusTypeVO(courseParticipationStatusTypeVO);
		this.courseParticipationStatusTypeVOToEntity(courseParticipationStatusTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void courseParticipationStatusTypeVOToEntity(
			CourseParticipationStatusTypeVO source,
			CourseParticipationStatusType target,
			boolean copyIfNull) {
		super.courseParticipationStatusTypeVOToEntity(source, target, copyIfNull);
	}

	private org.hibernate.Criteria createCourseParticipationStatusTypeCriteria() {
		org.hibernate.Criteria courseParticipationStatusTypeCriteria = this.getSession().createCriteria(CourseParticipationStatusType.class);
		courseParticipationStatusTypeCriteria.setCacheable(true);
		return courseParticipationStatusTypeCriteria;
	}

	@Override
	protected Collection<CourseParticipationStatusType> handleFindInitialStates(
			boolean admin, boolean selfRegistration) throws Exception {
		org.hibernate.Criteria courseParticipationStatusTypeCriteria = createCourseParticipationStatusTypeCriteria();
		if (admin) {
			if (selfRegistration) {
				courseParticipationStatusTypeCriteria.add(Restrictions.eq("adminSelfRegistrationInitial", true));
			} else {
				courseParticipationStatusTypeCriteria.add(Restrictions.eq("adminInitial", true));
			}
		} else {
			if (selfRegistration) {
				courseParticipationStatusTypeCriteria.add(Restrictions.eq("userSelfRegistrationInitial", true));
			} else {
				courseParticipationStatusTypeCriteria.add(Restrictions.eq("userInitial", true));
			}
		}
		courseParticipationStatusTypeCriteria.addOrder(Order.asc("id"));
		return courseParticipationStatusTypeCriteria.list();
	}

	@Override
	protected Collection<CourseParticipationStatusType> handleFindTransitions(
			Long statusTypeId, boolean admin, boolean selfRegistration)
			throws Exception {
		CourseParticipationStatusType statusType = this.load(statusTypeId);
		Iterator<CourseParticipationStatusType> it = null;
		if (statusType != null) {
			if (admin) {
				if (selfRegistration) {
					it = statusType.getAdminSelfRegistrationTransitions().iterator();
				} else {
					it = statusType.getAdminTransitions().iterator();
				}
			} else {
				if (selfRegistration) {
					it = statusType.getUserSelfRegistrationTransitions().iterator();
				} else {
					it = statusType.getUserTransitions().iterator();
				}
			}
		}
		ArrayList<CourseParticipationStatusType> result = new ArrayList<CourseParticipationStatusType>();
		if (it != null) { // force load:
			while (it.hasNext()) {
				result.add(this.load(it.next().getId()));
			}
		}
		result.sort(ID_COMPARATOR);
		return result;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private CourseParticipationStatusType loadCourseParticipationStatusTypeFromCourseParticipationStatusTypeVO(CourseParticipationStatusTypeVO courseParticipationStatusTypeVO) {
		// throw new UnsupportedOperationException("out value object to recursive entity not supported");
		CourseParticipationStatusType courseParticipationStatusType = null;
		Long id = courseParticipationStatusTypeVO.getId();
		if (id != null) {
			courseParticipationStatusType = this.load(id);
		}
		if (courseParticipationStatusType == null) {
			courseParticipationStatusType = CourseParticipationStatusType.Factory.newInstance();
		}
		return courseParticipationStatusType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CourseParticipationStatusTypeVO toCourseParticipationStatusTypeVO(final CourseParticipationStatusType entity) {
		return super.toCourseParticipationStatusTypeVO(entity);
	}

	@Override
	public void toCourseParticipationStatusTypeVO(
			CourseParticipationStatusType source,
			CourseParticipationStatusTypeVO target) {
		super.toCourseParticipationStatusTypeVO(source, target);
		target.setName(L10nUtil.getCourseParticipationStatusTypeName(Locales.USER, source.getNameL10nKey()));
	}
}