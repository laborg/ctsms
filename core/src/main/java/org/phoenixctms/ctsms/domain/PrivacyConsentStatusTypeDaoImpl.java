// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;

import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.compare.ComparatorFactory;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.PrivacyConsentStatusTypeVO;

/**
 * @see PrivacyConsentStatusType
 */
public class PrivacyConsentStatusTypeDaoImpl
		extends PrivacyConsentStatusTypeDaoBase {

	private final static Comparator<PrivacyConsentStatusType> ID_COMPARATOR = ComparatorFactory.createSafeLong(PrivacyConsentStatusType::getId);

	private org.hibernate.Criteria createPrivacyConsentStatusTypeCriteria() {
		org.hibernate.Criteria privacyConsentStatusTypeCriteria = this.getSession().createCriteria(PrivacyConsentStatusType.class);
		privacyConsentStatusTypeCriteria.setCacheable(true);
		return privacyConsentStatusTypeCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<PrivacyConsentStatusType> handleFindInitialStates() {
		org.hibernate.Criteria privacyConsentStatusTypeCriteria = createPrivacyConsentStatusTypeCriteria();
		privacyConsentStatusTypeCriteria.add(Restrictions.eq("initial", true));
		privacyConsentStatusTypeCriteria.addOrder(Order.asc("id"));
		return privacyConsentStatusTypeCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<PrivacyConsentStatusType> handleFindTransitions(Long statusTypeId) {
		PrivacyConsentStatusType statusType = this.load(statusTypeId);
		Iterator<PrivacyConsentStatusType> it = null;
		if (statusType != null) {
			it = statusType.getTransitions().iterator();
		}
		ArrayList<PrivacyConsentStatusType> result = new ArrayList<PrivacyConsentStatusType>();
		if (it != null) { // force load:
			while (it.hasNext()) {
				result.add(this.load(it.next().getId()));
			}
		}
		result.sort(ID_COMPARATOR);
		return result;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private PrivacyConsentStatusType loadPrivacyConsentStatusTypeFromPrivacyConsentStatusTypeVO(PrivacyConsentStatusTypeVO privacyConsentStatusTypeVO) {
		PrivacyConsentStatusType privacyConsentStatusType = null;
		Long id = privacyConsentStatusTypeVO.getId();
		if (id != null) {
			privacyConsentStatusType = this.load(id);
		}
		if (privacyConsentStatusType == null) {
			privacyConsentStatusType = PrivacyConsentStatusType.Factory.newInstance();
		}
		return privacyConsentStatusType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public PrivacyConsentStatusType privacyConsentStatusTypeVOToEntity(PrivacyConsentStatusTypeVO privacyConsentStatusTypeVO) {
		PrivacyConsentStatusType entity = this.loadPrivacyConsentStatusTypeFromPrivacyConsentStatusTypeVO(privacyConsentStatusTypeVO);
		this.privacyConsentStatusTypeVOToEntity(privacyConsentStatusTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void privacyConsentStatusTypeVOToEntity(
			PrivacyConsentStatusTypeVO source,
			PrivacyConsentStatusType target,
			boolean copyIfNull) {
		super.privacyConsentStatusTypeVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public PrivacyConsentStatusTypeVO toPrivacyConsentStatusTypeVO(final PrivacyConsentStatusType entity) {
		return super.toPrivacyConsentStatusTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toPrivacyConsentStatusTypeVO(
			PrivacyConsentStatusType source,
			PrivacyConsentStatusTypeVO target) {
		super.toPrivacyConsentStatusTypeVO(source, target);
		target.setName(L10nUtil.getPrivacyConsentStatusTypeName(Locales.USER, source.getNameL10nKey()));
	}
}