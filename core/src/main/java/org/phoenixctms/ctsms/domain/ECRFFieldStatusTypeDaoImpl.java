// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;

import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.compare.ComparatorFactory;
import org.phoenixctms.ctsms.enumeration.ECRFFieldStatusQueue;
import org.phoenixctms.ctsms.util.L10nUtil;
import org.phoenixctms.ctsms.util.L10nUtil.Locales;
import org.phoenixctms.ctsms.vo.ECRFFieldStatusTypeVO;

/**
 * @see ECRFFieldStatusType
 */
public class ECRFFieldStatusTypeDaoImpl
		extends ECRFFieldStatusTypeDaoBase {

	private final static Comparator<ECRFFieldStatusType> ID_COMPARATOR = ComparatorFactory.createSafeLong(ECRFFieldStatusType::getId);

	private void applySystemCriterions(org.hibernate.Criteria ecrfFieldStatusTypeCriteria, Boolean system) {
		if (system != null) {
			if (system) {
				ecrfFieldStatusTypeCriteria.add(Restrictions.or(
						Restrictions.eq("validationSuccess", true), Restrictions.or(
								Restrictions.eq("validationFailed", true),
								Restrictions.eq("validationError", true))));
			} else {
				ecrfFieldStatusTypeCriteria.add(Restrictions.and(
						Restrictions.eq("validationSuccess", false), Restrictions.and(
								Restrictions.eq("validationFailed", false),
								Restrictions.eq("validationError", false))));
			}
			// Restrictions.eq("system", system));
		}
	}

	private org.hibernate.Criteria createEcrfFieldStatusTypeCriteria() {
		org.hibernate.Criteria ecrfFieldStatusTypeCriteria = this.getSession().createCriteria(ECRFFieldStatusType.class);
		ecrfFieldStatusTypeCriteria.setCacheable(true);
		return ecrfFieldStatusTypeCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ECRFFieldStatusType eCRFFieldStatusTypeVOToEntity(ECRFFieldStatusTypeVO eCRFFieldStatusTypeVO) {
		ECRFFieldStatusType entity = this.loadECRFFieldStatusTypeFromECRFFieldStatusTypeVO(eCRFFieldStatusTypeVO);
		this.eCRFFieldStatusTypeVOToEntity(eCRFFieldStatusTypeVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void eCRFFieldStatusTypeVOToEntity(
			ECRFFieldStatusTypeVO source,
			ECRFFieldStatusType target,
			boolean copyIfNull) {
		super.eCRFFieldStatusTypeVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<ECRFFieldStatusType> handleFindByQueue(ECRFFieldStatusQueue queue, Boolean system) {
		org.hibernate.Criteria ecrfFieldStatusTypeCriteria = createEcrfFieldStatusTypeCriteria();
		if (queue != null) {
			ecrfFieldStatusTypeCriteria.add(Restrictions.eq("queue", queue));
		}
		applySystemCriterions(ecrfFieldStatusTypeCriteria, system);
		ecrfFieldStatusTypeCriteria.addOrder(Order.asc("id"));
		return ecrfFieldStatusTypeCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<ECRFFieldStatusType> handleFindInitialStates(ECRFFieldStatusQueue queue, Boolean system) {
		org.hibernate.Criteria ecrfFieldStatusTypeCriteria = createEcrfFieldStatusTypeCriteria();
		ecrfFieldStatusTypeCriteria.add(Restrictions.eq("initial", true));
		if (queue != null) {
			ecrfFieldStatusTypeCriteria.add(Restrictions.eq("queue", queue));
		}
		applySystemCriterions(ecrfFieldStatusTypeCriteria, system);
		ecrfFieldStatusTypeCriteria.addOrder(Order.asc("id"));
		return ecrfFieldStatusTypeCriteria.list();
	}

	/**
	 * @inheritDoc
	 */
	@Override
	protected Collection<ECRFFieldStatusType> handleFindTransitions(Long statusTypeId, Boolean system) {
		ECRFFieldStatusType statusType = this.load(statusTypeId);
		Iterator<ECRFFieldStatusType> it = null;
		if (statusType != null) {
			it = statusType.getTransitions().iterator();
		}
		ArrayList<ECRFFieldStatusType> result = new ArrayList<ECRFFieldStatusType>();
		if (it != null) { // force load:
			while (it.hasNext()) {
				statusType = it.next();
				boolean add;
				if (system != null) {
					if (system) {
						add = statusType.isValidationError() || statusType.isValidationFailed() || statusType.isValidationSuccess();
					} else {
						add = !statusType.isValidationError() && !statusType.isValidationFailed() && !statusType.isValidationSuccess();
					}
				} else {
					add = true;
				}
				if (add) {
					result.add(this.load(statusType.getId()));
				}
			}
		}
		result.sort(ID_COMPARATOR);
		return result;
	}

	@Override
	protected ECRFFieldStatusType handleGetValidationError() throws Exception {
		org.hibernate.Criteria ecrfFieldStatusTypeCriteria = createEcrfFieldStatusTypeCriteria();
		ecrfFieldStatusTypeCriteria.add(Restrictions.eq("validationError", true));
		ecrfFieldStatusTypeCriteria.addOrder(Order.desc("id"));
		ecrfFieldStatusTypeCriteria.setMaxResults(1);
		return (ECRFFieldStatusType) ecrfFieldStatusTypeCriteria.uniqueResult();
	}

	@Override
	protected ECRFFieldStatusType handleGetValidationFailed() throws Exception {
		org.hibernate.Criteria ecrfFieldStatusTypeCriteria = createEcrfFieldStatusTypeCriteria();
		ecrfFieldStatusTypeCriteria.add(Restrictions.eq("validationFailed", true));
		ecrfFieldStatusTypeCriteria.addOrder(Order.desc("id"));
		ecrfFieldStatusTypeCriteria.setMaxResults(1);
		return (ECRFFieldStatusType) ecrfFieldStatusTypeCriteria.uniqueResult();
	}

	@Override
	protected ECRFFieldStatusType handleGetValidationSuccess() throws Exception {
		org.hibernate.Criteria ecrfFieldStatusTypeCriteria = createEcrfFieldStatusTypeCriteria();
		ecrfFieldStatusTypeCriteria.add(Restrictions.eq("validationSuccess", true));
		ecrfFieldStatusTypeCriteria.addOrder(Order.desc("id"));
		ecrfFieldStatusTypeCriteria.setMaxResults(1);
		return (ECRFFieldStatusType) ecrfFieldStatusTypeCriteria.uniqueResult();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private ECRFFieldStatusType loadECRFFieldStatusTypeFromECRFFieldStatusTypeVO(ECRFFieldStatusTypeVO eCRFFieldStatusTypeVO) {
		// TODO implement loadECRFFieldStatusTypeFromECRFFieldStatusTypeVO
		// throw new UnsupportedOperationException("org.phoenixctms.ctsms.domain.loadECRFFieldStatusTypeFromECRFFieldStatusTypeVO(ECRFFieldStatusTypeVO) not yet implemented.");
		ECRFFieldStatusType ecrfFieldStatusType = null;
		Long id = eCRFFieldStatusTypeVO.getId();
		if (id != null) {
			ecrfFieldStatusType = this.load(id);
		}
		if (ecrfFieldStatusType == null) {
			ecrfFieldStatusType = ECRFFieldStatusType.Factory.newInstance();
		}
		return ecrfFieldStatusType;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public ECRFFieldStatusTypeVO toECRFFieldStatusTypeVO(final ECRFFieldStatusType entity) {
		return super.toECRFFieldStatusTypeVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toECRFFieldStatusTypeVO(
			ECRFFieldStatusType source,
			ECRFFieldStatusTypeVO target) {
		super.toECRFFieldStatusTypeVO(source, target);
		target.setName(L10nUtil.getEcrfFieldStatusTypeName(Locales.USER, source.getNameL10nKey()));
	}
}