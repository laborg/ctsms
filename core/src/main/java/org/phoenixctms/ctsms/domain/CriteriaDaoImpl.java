// Generated by: hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package org.phoenixctms.ctsms.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;

import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.phoenixctms.ctsms.enumeration.DBModule;
import org.phoenixctms.ctsms.query.CategoryCriterion;
import org.phoenixctms.ctsms.query.CriteriaUtil;
import org.phoenixctms.ctsms.query.SubCriteriaMap;
import org.phoenixctms.ctsms.util.DefaultSettings;
import org.phoenixctms.ctsms.util.SettingCodes;
import org.phoenixctms.ctsms.util.Settings;
import org.phoenixctms.ctsms.util.Settings.Bundle;
import org.phoenixctms.ctsms.vo.CriteriaInVO;
import org.phoenixctms.ctsms.vo.CriteriaInstantVO;
import org.phoenixctms.ctsms.vo.CriteriaOutVO;
import org.phoenixctms.ctsms.vo.CriterionInstantVO;
import org.phoenixctms.ctsms.vo.PSFVO;
import org.phoenixctms.ctsms.vo.UserOutVO;
import org.phoenixctms.ctsms.vocycle.CriteriaGraph;

/**
 * @see Criteria
 */
public class CriteriaDaoImpl
		extends CriteriaDaoBase {

	private org.hibernate.Criteria createCriteriaCriteria() {
		org.hibernate.Criteria criteriaCriteria = this.getSession().createCriteria(Criteria.class);
		return criteriaCriteria;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Criteria criteriaInstantVOToEntity(CriteriaInstantVO criteriaInstantVO) {
		Criteria entity = this.loadCriteriaFromCriteriaInstantVO(criteriaInstantVO);
		this.criteriaInstantVOToEntity(criteriaInstantVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criteriaInstantVOToEntity(
			CriteriaInstantVO source,
			Criteria target,
			boolean copyIfNull) {
		super.criteriaInstantVOToEntity(source, target, copyIfNull);
		Collection criterions = source.getCriterions();
		if (copyIfNull || criterions.size() > 0) {
			this.getCriterionDao().criterionInstantVOToEntityCollection(criterions);
			target.setCriterions(criterions);
		}
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Criteria criteriaInVOToEntity(CriteriaInVO criteriaInVO) {
		Criteria entity = this.loadCriteriaFromCriteriaInVO(criteriaInVO);
		this.criteriaInVOToEntity(criteriaInVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criteriaInVOToEntity(
			CriteriaInVO source,
			Criteria target,
			boolean copyIfNull) {
		super.criteriaInVOToEntity(source, target, copyIfNull);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public Criteria criteriaOutVOToEntity(CriteriaOutVO criteriaOutVO) {
		Criteria entity = this.loadCriteriaFromCriteriaOutVO(criteriaOutVO);
		this.criteriaOutVOToEntity(criteriaOutVO, entity, true);
		return entity;
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void criteriaOutVOToEntity(
			CriteriaOutVO source,
			Criteria target,
			boolean copyIfNull) {
		super.criteriaOutVOToEntity(source, target, copyIfNull);
		Collection criterions = source.getCriterions();
		UserOutVO modifiedUserVO = source.getModifiedUser();
		if (copyIfNull || criterions.size() > 0) {
			this.getCriterionDao().criterionOutVOToEntityCollection(criterions); // copyifnull!!
			target.setCriterions(criterions);
		}
		if (modifiedUserVO != null) {
			target.setModifiedUser(this.getUserDao().userOutVOToEntity(modifiedUserVO));
		} else if (copyIfNull) {
			target.setModifiedUser(null);
		}
	}

	@Override
	protected Collection<Criteria> handleFindByModule(DBModule module, Boolean loadByDefault, PSFVO psf)
			throws Exception {
		org.hibernate.Criteria criteriaCriteria = createCriteriaCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Criteria.class, criteriaCriteria);
		if (module != null) {
			criteriaCriteria.add(Restrictions.eq("module", module));
		}
		if (loadByDefault != null) {
			criteriaCriteria.add(Restrictions.eq("loadByDefault", loadByDefault.booleanValue()));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return criteriaCriteria.list();
	}

	@Override
	protected Collection<Criteria> handleFindByModuleCategory(DBModule module,
			String category, Boolean loadByDefault, PSFVO psf) throws Exception {
		org.hibernate.Criteria criteriaCriteria = createCriteriaCriteria();
		SubCriteriaMap criteriaMap = new SubCriteriaMap(Criteria.class, criteriaCriteria);
		if (module != null) {
			criteriaCriteria.add(Restrictions.eq("module", module));
		}
		if (loadByDefault != null) {
			criteriaCriteria.add(Restrictions.eq("loadByDefault", loadByDefault.booleanValue()));
		}
		if (category != null && category.length() > 0) {
			criteriaCriteria.add(Restrictions.eq("category", category));
		} else {
			criteriaCriteria.add(Restrictions.or(Restrictions.eq("category", ""), Restrictions.isNull("category")));
		}
		CriteriaUtil.applyPSFVO(criteriaMap, psf);
		return criteriaCriteria.list();
	}

	@Override
	protected Collection<String> handleFindCategories(DBModule module, String categoryPrefix, Integer limit)
			throws Exception {
		org.hibernate.Criteria criteriaCriteria = createCriteriaCriteria();
		if (module != null) {
			criteriaCriteria.add(Restrictions.eq("module", module));
		}
		CategoryCriterion.apply(criteriaCriteria, new CategoryCriterion(categoryPrefix, "category", MatchMode.START));
		criteriaCriteria.addOrder(Order.asc("category"));
		criteriaCriteria.setProjection(Projections.distinct(Projections.property("category")));
		CriteriaUtil.applyLimit(limit, Settings.getIntNullable(SettingCodes.CRITERIA_CATEGORY_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT, Bundle.SETTINGS,
				DefaultSettings.CRITERIA_CATEGORY_AUTOCOMPLETE_DEFAULT_RESULT_LIMIT), criteriaCriteria);
		return criteriaCriteria.list();
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Criteria loadCriteriaFromCriteriaInstantVO(CriteriaInstantVO criteriaInstantVO) {
		Criteria criteria = Criteria.Factory.newInstance();
		Collection criterions = criteriaInstantVO.getCriterions();
		this.getCriterionDao().criterionInstantVOToEntityCollection(criterions);
		criteria.setCriterions(criterions);
		return criteria;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Criteria loadCriteriaFromCriteriaInVO(CriteriaInVO criteriaInVO) {
		Criteria criteria = null;
		Long id = criteriaInVO.getId();
		if (id != null) {
			criteria = load(id);
		}
		if (criteria == null) {
			criteria = Criteria.Factory.newInstance();
		}
		return criteria;
	}

	/**
	 * Retrieves the entity object that is associated with the specified value object
	 * from the object store. If no such entity object exists in the object store,
	 * a new, blank entity is created
	 */
	private Criteria loadCriteriaFromCriteriaOutVO(CriteriaOutVO criteriaOutVO) {
		throw new UnsupportedOperationException("out value object to recursive entity not supported");
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriteriaInstantVO toCriteriaInstantVO(final Criteria entity) {
		return super.toCriteriaInstantVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriteriaInstantVO(
			Criteria source,
			CriteriaInstantVO target) {
		super.toCriteriaInstantVO(source, target);
		// WARNING! No conversion for target.criterions (can't convert source.getCriterions():org.phoenixctms.ctsms.domain.Criterion to org.phoenixctms.ctsms.vo.CriterionInstantVO
		target.setCriterions(toCriterionInstantVOCollection(source.getCriterions()));
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriteriaInVO toCriteriaInVO(final Criteria entity) {
		return super.toCriteriaInVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriteriaInVO(
			Criteria source,
			CriteriaInVO target) {
		super.toCriteriaInVO(source, target);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public CriteriaOutVO toCriteriaOutVO(final Criteria entity) {
		return super.toCriteriaOutVO(entity);
	}

	/**
	 * @inheritDoc
	 */
	@Override
	public void toCriteriaOutVO(
			Criteria source,
			CriteriaOutVO target) {
		(new CriteriaGraph(this, this.getCriterionDao(), this.getUserDao())).toVOHelper(source, target, new HashMap<Class, HashMap<Long, Object>>());
	}

	@Override
	public void toCriteriaOutVO(
			Criteria source,
			CriteriaOutVO target, HashMap<Class, HashMap<Long, Object>> voMap) {
		(new CriteriaGraph(this, this.getCriterionDao(), this.getUserDao())).toVOHelper(source, target, voMap);
	}

	private ArrayList<CriterionInstantVO> toCriterionInstantVOCollection(Collection<Criterion> criterions) { // lazyload persistentset prevention
		// related to http://forum.andromda.org/viewtopic.php?t=4288
		CriterionDao criterionDao = this.getCriterionDao();
		ArrayList<CriterionInstantVO> result = new ArrayList<CriterionInstantVO>(criterions.size());
		Iterator<Criterion> it = criterions.iterator();
		while (it.hasNext()) {
			result.add(criterionDao.toCriterionInstantVO(it.next()));
		}
		result.sort(Comparator.nullsLast(Comparator.comparing(CriterionInstantVO::getPosition)));
		return result;
	}
}